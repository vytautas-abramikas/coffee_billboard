{"version":3,"sources":["coffeeData.js","App.js","serviceWorker.js","index.js"],"names":["coffeeData","id","name","price","url","MakeCoffee","props","react_default","a","createElement","className","src","item","alt","onClick","removeCoffee","MakeOption","value","StoreUserData","userData","freeId","localStorage","setItem","JSON","stringify","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","coffeesAll","selected","bind","assertThisInitialized","selectCoffee","addCoffee","getUserData","event","target","setState","prevState","parseInt","_this2","preventDefault","coffeeFromMenu","filter","coffeeToAdd","usedIds","updatedList","push","shortenedList","length","getItem","parse","_this3","coffeePrice","map","reduce","b","toFixed","buyingList","index","key","optionsList","menuItem","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11f6a7a7.chunk.js","sourcesContent":["const coffeeData = [\r\n\t{\r\n\t\tid: 0,\r\n\t\tname: \"Coffee 1\",\r\n\t\tprice: 1.11,\r\n\t\turl: \"./assets/images/coffee1.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: \"Coffee 2\",\r\n\t\tprice: 2.22,\r\n\t\turl: \"./assets/images/coffee2.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: \"Coffee 3\",\r\n\t\tprice: 3.33,\r\n\t\turl: \"./assets/images/coffee3.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: \"Coffee 4\",\r\n\t\tprice: 4.44,\r\n\t\turl: \"./assets/images/coffee4.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: \"Coffee 5\",\r\n\t\tprice: 5.55,\r\n\t\turl: \"./assets/images/coffee5.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: \"Coffee 6\",\r\n\t\tprice: 6.66,\r\n\t\turl: \"./assets/images/coffee6.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: \"Coffee 7\",\r\n\t\tprice: 7.77,\r\n\t\turl: \"./assets/images/coffee7.jpg\"\r\n\t},\r\n\t{\r\n\t\tid: 7,\r\n\t\tname: \"Coffee 8\",\r\n\t\tprice: 8.88,\r\n\t\turl: \"./assets/images/coffee8.jpg\"\r\n\t}\r\n]\r\n\r\nexport default coffeeData","import React, { Component } from 'react'\nimport './App.css'\nimport coffeeData from './coffeeData'\n\nfunction MakeCoffee(props){\n  return (\n    <div className=\"coffee_container\">\n      <img src={props.item.url} alt={props.item.name}/>\n      <h3>{props.item.price}€</h3>\n      <p>{props.item.name}</p>\n      <button \n        name={props.item.id}\n        className=\"remove\"\n        onClick={() => props.removeCoffee(props.item.id)}\n      >\n      remove\n      </button>\n    </div>\n  )\n}\n\nfunction MakeOption(props){\n  return(\n    <option value={props.item.id}>{props.item.name} - {props.item.price}€</option>\n  )\n}\n\nfunction StoreUserData(userData, freeId){\n  localStorage.setItem(\"userData\", JSON.stringify(userData))\n  localStorage.setItem(\"freeId\", freeId)\n}\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      coffeesAll: coffeeData,\n      userData: [],\n      freeId: 0,\n      selected: 0\n    }\n    this.removeCoffee = this.removeCoffee.bind(this)\n    this.selectCoffee = this.selectCoffee.bind(this)\n    this.addCoffee = this.addCoffee.bind(this)\n    this.getUserData = this.getUserData.bind(this)\n  }\n\n  selectCoffee(event){\n    const id = event.target.value\n    this.setState(prevState => {\n      return {\n        selected: parseInt(id)\n      }\n    })\n  }\n\n  addCoffee(event){\n    event.preventDefault()\n    this.setState(prevState => {\n      const coffeeFromMenu = this.state.coffeesAll.filter((item) => item.id === this.state.selected)\n\n      const coffeeToAdd = {\n      id: this.state.freeId,\n      name: coffeeFromMenu[0].name,\n      price: coffeeFromMenu[0].price,\n      url: coffeeFromMenu[0].url\n      }\n\n      const usedIds = this.state.freeId\n      const updatedList = prevState.userData\n      updatedList.push(coffeeToAdd)\n      StoreUserData(updatedList, usedIds + 1)\n\n      return {\n        userData: updatedList,\n        freeId: usedIds + 1\n      }\n    })\n  }\n\n  removeCoffee(id){\n    this.setState(prevState => {\n      const shortenedList = prevState.userData.filter((item) => item.id !== id)\n      StoreUserData(shortenedList)\n      return {\n        userData: shortenedList\n      }\n    })\n  }\n\n  getUserData(){\n    if (this.state.userData.length === 0){ \n      if (localStorage.getItem(\"userData\") !== null){\n        if (localStorage.getItem(\"userData\").length > 2){\n          this.setState(() => {\n            const dataFromLocal = JSON.parse(localStorage.getItem(\"userData\"))\n            const freeIdFromLocal = parseInt(localStorage.getItem(\"freeId\"))\n            return {\n              userData: dataFromLocal,\n              freeId: freeIdFromLocal\n            }\n          })\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n     this.getUserData()\n  }\n\n  render() {\n    const coffeePrice = this.state.userData.map(item => item.price).reduce((a, b) => a + b, 0).toFixed(2)\n    const buyingList = this.state.userData.map((item, index) => \n      <MakeCoffee key={\"coffee\"+index} item={item} removeCoffee={this.removeCoffee} />)\n\n    const optionsList = this.state.coffeesAll.map((menuItem, index) => \n      <MakeOption key={\"menu\"+index} item={menuItem} />)\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Coffee Billboard</h1>\n          <h2>Price: {coffeePrice}€</h2>\n          <form>\n            <select onChange={this.selectCoffee}>\n                {optionsList}    \n            </select>\n            <button onClick={this.addCoffee}>Add</button>\n            <button className=\"pay\">Pay</button>\n          </form>\n        </header>\n        <div className=\"content_container\">\n          {buyingList}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}